// Code generated by pggen. DO NOT EDIT.

package postgis

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateVisit(ctx context.Context, visitID int32, geo pgtype.Point) (pgconn.CommandTag, error)
	// CreateVisitBatch enqueues a CreateVisit query into batch to be executed
	// later by the batch.
	CreateVisitBatch(batch *pgx.Batch, visitID int32, geo pgtype.Point)
	// CreateVisitScan scans the result of an executed CreateVisitBatch query.
	CreateVisitScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindVisit(ctx context.Context, visitID int32) (FindVisitRow, error)
	// FindVisitBatch enqueues a FindVisit query into batch to be executed
	// later by the batch.
	FindVisitBatch(batch *pgx.Batch, visitID int32)
	// FindVisitScan scans the result of an executed FindVisitBatch query.
	FindVisitScan(results pgx.BatchResults) (FindVisitRow, error)
}

type DBQuerier struct {
	conn genericConn
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
	}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

const createVisitSQL = `INSERT INTO visit(visit_id, geo)
VALUES ($1, $2);`

// CreateVisit implements Querier.CreateVisit.
func (q *DBQuerier) CreateVisit(ctx context.Context, visitID int32, geo pgtype.Point) (pgconn.CommandTag, error) {
	cmdTag, err := q.conn.Exec(ctx, createVisitSQL, visitID, geo)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query CreateVisit: %w", err)
	}
	return cmdTag, err
}

// CreateVisitBatch implements Querier.CreateVisitBatch.
func (q *DBQuerier) CreateVisitBatch(batch *pgx.Batch, visitID int32, geo pgtype.Point) {
	batch.Queue(createVisitSQL, visitID, geo)
}

// CreateVisitScan implements Querier.CreateVisitScan.
func (q *DBQuerier) CreateVisitScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec CreateVisitBatch: %w", err)
	}
	return cmdTag, err
}

const findVisitSQL = `SELECT visit_id, geo
FROM visit
WHERE visit_id = $1
LIMIT 1;`

type FindVisitRow struct {
	VisitID pgtype.Int4  `json:"visit_id"`
	Geo     pgtype.Point `json:"geo"`
}

// FindVisit implements Querier.FindVisit.
func (q *DBQuerier) FindVisit(ctx context.Context, visitID int32) (FindVisitRow, error) {
	row := q.conn.QueryRow(ctx, findVisitSQL, visitID)
	var item FindVisitRow
	if err := row.Scan(&item.VisitID, &item.Geo); err != nil {
		return item, fmt.Errorf("query FindVisit: %w", err)
	}
	return item, nil
}

// FindVisitBatch implements Querier.FindVisitBatch.
func (q *DBQuerier) FindVisitBatch(batch *pgx.Batch, visitID int32) {
	batch.Queue(findVisitSQL, visitID)
}

// FindVisitScan implements Querier.FindVisitScan.
func (q *DBQuerier) FindVisitScan(results pgx.BatchResults) (FindVisitRow, error) {
	row := results.QueryRow()
	var item FindVisitRow
	if err := row.Scan(&item.VisitID, &item.Geo); err != nil {
		return item, fmt.Errorf("scan FindVisitBatch row: %w", err)
	}
	return item, nil
}
